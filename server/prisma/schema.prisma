generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    MANUFACTURER
    DISTRIBUTOR
}

model User {
    address            String              @id
    name               String
    description        String
    role               Role
    Products           Product[]
    ManufacturerShards ManufacturerShard[]
    Claims             Claim[]
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt
}

model Product {
    id                 String              @id @default(uuid())
    name               String
    description        String
    image              String
    User               User                @relation(fields: [userId], references: [address])
    userId             String
    ManufacturerShards ManufacturerShard[]
    Listings           Listing[]
    status             String
    shard              String?
    ProductHash        String?
    fdcProof           Json?
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt

    @@index([userId])
}

model ManufacturerShard {
    Product   Product  @relation(fields: [productId], references: [id])
    productId String
    User      User     @relation(fields: [userId], references: [address])
    userId    String
    shard     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([userId, productId])
    @@index([userId, productId])
}

model Listing {
    id        String   @id @default(uuid())
    productId String
    Product   Product  @relation(fields: [productId], references: [id])
    isClaimed Boolean
    claims    Claim[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([productId])
}

model Proof {
    id        String   @id @default(uuid())
    proof     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Claim {
    id        String   @id @default(uuid())
    User      User     @relation(fields: [userId], references: [address])
    userId    String
    nftId     String
    Listing   Listing  @relation(fields: [listingId], references: [id])
    listingId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId, listingId])
}
